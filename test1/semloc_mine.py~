
import numpy as np
import mne
#from mne import fiff, read_proj, read_selection
# from mne.datasets import sample
from mne.fiff import Evoked
from mne.minimum_norm import apply_inverse_epochs, apply_inverse, read_inverse_operator, source_induced_power
import pylab as pl
from mne.layouts import read_layout
from mne.time_frequency import compute_raw_psd, induced_power
from mne.connectivity import seed_target_indices, spectral_connectivity

data_path = '/group/erp/data/olaf.hauk/MEG/TypLexM/data/MF22_new/'
event_path = '/group/erp/data/olaf.hauk/MEG/TypLexM/data/MF22_new/'
label_path = '/group/erp/data/olaf.hauk/MEG/TypLexM/labels/createdlabels_SL/'

meg='meg10_0378/101209/'
stim_delay = 0.034 # delay in s
raw_fname = data_path + meg + '/semloc_raw_ssstf_raw.fif'
event_fname = event_path + meg + 'semloc_raw_ssstnew.txt'
raw = mne.io.Raw(raw_fname) # 
print "read events"
events = mne.read_events(event_fname)
# events = mne.find_events(raw, stim_channel='STI101')
events[:,0] += np.round( raw.info['sfreq']*stim_delay )
picks = mne.pick_types(raw.info, meg=True, eeg=True, eog=True,
                                stim=False, exclude='bads') #
event_id = dict(A=1, C=2)  # event trigger and conditions #
tmin = -0.2  # start of each epoch (200ms before the trigger) #
tmax = 0.5  # end of each epoch (500ms after the trigger) #
include = []
exclude = raw.info['bads'] # bads
picks = mne.pick_types(raw.info, meg=True, eeg=True, eog=True,stim=False, include=include, exclude=exclude)
baseline = (None, 0)  # means from the first instant to t = 0 #
reject = dict(grad=4000e-13, mag=4e-12, eog=150e-6) #
epochs = mne.Epochs(raw, events, event_id, tmin, tmax, proj=True, picks=picks, baseline=baseline, preload=False, reject=reject) #
print "computing average"
###evoked = [epochs[name].average() for name in ['aud_l', 'aud_r']]
evoked=epochs['A'].average() 
print(evoked)

#evoked.plot()

print "TF analysis"
# frequency bands with variable number of cycles for wavelets
frequencies = np.arange(8, 45, 1)
n_cycles = frequencies / float(7)
n_cycles[frequencies<=20] = 2
n_cycles[frequencies<=20] += np.arange(0,1,0.077)
Fs = raw.info['sfreq']  # sampling in Hz
from mne.time_frequency import induced_power
epochs_data = epochs['A'].get_data() 
power, phase_lock = induced_power(epochs_data, Fs=Fs, frequencies=frequencies, n_cycles=2, n_jobs=1)
##plot power TF 
#pl.imshow(power[0, :, :], aspect='auto', origin='lower')
#pl.title('Power')
#pl.colorbar
#pl.show()

## plot phase lock TF
# pl.figure()
# pl.phase_lock(power[0, :, :], aspect='auto', origin='lower')
# pl.title('Phase lock')
# pl.colorbar

print "Inverse Modelling"
from mne.minimum_norm import apply_inverse, read_inverse_operator

inv_path = '/group/erp/data/olaf.hauk/MEG/TypLexM/data/MF22_new/'
inv_fname = inv_path  + 'InvOp_3L-EMEG-loose0.2-inv.fif'
inverse_operator = read_inverse_operator(fname_inv)
snr = 3.0
lambda2 = 1.0 / snr ** 2
method = "dSPM"
stc = apply_inverse(evoked, inverse_operator, lambda2, method)
#stc.save('mne_dSPM_inverse')



