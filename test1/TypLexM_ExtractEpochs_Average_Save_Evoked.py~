# Authors: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
#          Denis A. Engemann <denis.engemann@gmail.com>
#
# License: BSD (3-clause)

print(__doc__)

import mne
from mne import io
from mne.io import Raw
import numpy as np
import pylab as pl

###############################################################################
# Set parameters
data_path = '/home/rf02/rezvan/TypLexMEG'
meg = '/meg10_0378/101209/'
raw_fname = data_path + meg + 'semloc_raw_ssstf_raw.fif'
event_fname = data_path + meg +  'semloc_raw_ssstf-eve.fif'
tmin, tmax = -0.1, 0.50
event_id = {'cncrt_wrd': 1, 'abs_wrd': 2}



#   Setup for reading the raw data
raw = io.Raw(raw_fname)
events = mne.read_events(event_fname)
stim_delay=0.034 # delay in s ((NOTE! not in the example, taken from Olaf's script. Rezvan))
events[:,0] += np.round( raw.info['sfreq']*stim_delay ) #((NOTE! not in the example, taken from Olaf's script. Rezvan))

#   Plot raw data
#fig = raw.plot(events=events)

#   Set up pick list: EEG + STI 014 - bad channels (modify to your needs)
include = []  # or stim channels ['STI 014']
exclude = raw.info['bads'] # bads

# pick EEG and MEG channels
picks = mne.pick_types(raw.info, meg=True, eeg=True, stim=False, eog=True,
                       include=include, exclude='bads')
# Read epochs

reject = dict(eeg=120e-6, eog=150e-6, grad=200e-12, mag=4e-12)
epochs = mne.Epochs(raw, events, event_id, tmin, tmax, picks=picks,
                    baseline=(None, 0), reject=reject, preload=True)

#epochs.plot()
## averaging
out_evoked_fname = data_path + meg + 'semloc_abstract&concrete_evoked-ave.fif'
print "averaging"
evokeds = [epochs[name].average() for name in [ 'cncrt_wrd','abs_wrd']]  # average epochs and get an Evoked dataset.

#evoked.save(out_evoked_fname)  # save evoked data to disk
print out_evoked_fname
mne.write_evoked(out_evoked_fname, evokeds)

###############################################################################
### View evoked response
import matplotlib.pyplot as plt
#plt.clf()
#ax = plt.figure()
##evokeds[0].plot()
#plt.title('EEG evoked potential, abstract word trials')
#plt.ylabel('Potential (uV)')
#ax = plt.subplot(2, 1, 2)
#plt.figure()
##evokeds[1].plot()
#plt.title('EEG evoked potential, concrete word trials')
#plt.ylabel('Potential (uV)')
#plt.show()

##############
print "TF analysis"
# frequency bands with variable number of cycles for wavelets
frequencies = np.arange(8, 45, 1)
n_cycles = frequencies / float(7)
n_cycles[frequencies<=20] = 2
n_cycles[frequencies<=20] += np.arange(0,1,0.077)
Fs = raw.info['sfreq']  # sampling in Hz
from mne.time_frequency import induced_power
epochs_data = epochs['abs_wrd'].get_data() 
power, phase_lock = induced_power(epochs_data, Fs=Fs, frequencies=frequencies, n_cycles=n_cycles, n_jobs=1)

print "plot power TF "
pl.figure()
pl.subplot(3,1,1)
pl.imshow(power[20, :, :], aspect='auto', origin='lower')
pl.title('Power')
pl.colorbar
## plot phase lock TF
pl.subplot(3,1,2)
pl.imshow(phase_lock[20, :, :], aspect='auto', origin='lower')
pl.title('Phase lock')
pl.colorbar
pl.show()
