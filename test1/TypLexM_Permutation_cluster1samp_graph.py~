"""
=========================================================
TF representation of SemLoc for frequency bands in source labels
=========================================================

"""
# Authors: Alexandre Gramfort <gramfort@nmr.mgh.harvard.edu>
#
# License: BSD (3-clause)


print(__doc__)

import sys
sys.path.append('/imaging/local/software/python_packages/nibabel/1.3.0')
sys.path.append('/imaging/local/software/python_packages/pysurfer/v0.4')
sys.path.append('/imaging/local/software/python_packages/scikit-learn/v0.14.1')
sys.path.append('/imaging/local/software/mne_python/latest')

# for qsub
# (add ! here if needed) 
#sys.path.append('/imaging/local/software/anaconda/latest/x86_64/bin/python')
sys.path.append('/imaging/local/software/mne_python/git-master-0.8/mne-python/')
###
import os.path as op
import matplotlib.pyplot as plt
import numpy as np
import mne
from mne import io
from mne.io import Raw
import pylab as pl
from mne import (stats, read_evokeds, equalize_channels,read_proj, read_selection)
from mne.preprocessing.ica import ICA
import scipy.io as sio
import operator
import warnings
def fxn():
    warnings.warn("deprecated", DeprecationWarning)

with warnings.catch_warnings():
     warnings.filterwarnings("ignore")
     fxn()
from mne.minimum_norm import (read_inverse_operator, make_inverse_operator, write_inverse_operator, apply_inverse, read_inverse_operator,apply_inverse_epochs, apply_inverse, source_induced_power,source_band_induced_power)
from mne.minimum_norm.inverse import (prepare_inverse_operator, _assemble_kernel)

from surfer import Brain
from surfer.io import read_stc
import logging
import os
import sklearn
import scipy.io
from mne import filter
from mne import find_events
from mne.epochs import combine_event_ids
from mne import (io, spatial_tris_connectivity, compute_morph_matrix,
                 grade_to_tris)
from mne.epochs import equalize_epoch_counts
from mne.stats import (spatio_temporal_cluster_1samp_test,
                       summarize_clusters_stc)
from mne.minimum_norm import apply_inverse, read_inverse_operator
from mne.datasets import sample
from mne.layouts import read_layout
from mne.connectivity import seed_target_indices, spectral_connectivity

###############################################################################
data_path = '/imaging/rf02/TypLexMEG/' # root directory for your MEG data
os.chdir(data_path)
subjects_dir = '/home/rf02/rezvan/TypLexMEG/'    # where your MRI subdirectories are
# where event-files are
event_path = '/imaging/rf02/TypLexMEG/'    # where event files are

label_path = '/home/rf02/rezvan/TypLexMEG/createdlabels_SL/'

inv_path = '/imaging/rf02/TypLexMEG/'
inv_fname = 'InverseOperator_EMEG-inv.fif'

# get indices for subjects to be processed from command line input
# 
print sys.argv
subject_inds = []
for ss in sys.argv[1:]:
   subject_inds.append( int( ss ) )

subject_inds=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
print "subject_inds:"
print subject_inds
print "No rejection"

list_all = ['meg10_0378/101209/', 
'meg10_0390/101214/',
'meg11_0026/110223/', 
'meg11_0050/110307/', 
'meg11_0052/110307/', 
'meg11_0069/110315/', 
'meg11_0086/110322/', 
'meg11_0091/110328/', 
'meg11_0096/110404/', 
'meg11_0101/110411/', 
'meg11_0102/110411/', 
'meg11_0112/110505/',
'meg11_0104/110412/',  
'meg11_0118/110509/', 
'meg11_0131/110519/', 
'meg11_0144/110602/', 
'meg11_0147/110603/', 


]

# subjects names used for MRI data
subjects=['SS1_Meg10_0378',
'SS2_Meg10_0390',
'SS3_Meg11_0026',
'SS4_Meg11_0050',
'SS5_Meg11_0052',
'SS6_Meg11_0069',
'SS9_Meg11_0086',
'SS10_Meg11_0091',
'SS12_Meg11_0096',
'SS13_Meg11_0101',
'SS14_Meg11_0102',
'SS15_Meg11_0112',
'SS16_Meg11_0104',
'SS18_Meg11_0118',
'SS19_Meg11_0131',
'SS20_Meg11_0144',
'SS21_Meg11_0147'
]

ll = []
for ss in subject_inds:
 ll.append(list_all[ss])

print "ll:"
print ll



ii=-1
#X=np.zeros((20484,2,17))
Xc=np.zeros((17,72,4,551))
Xa=np.zeros((17,72,4,551))
Xs=np.zeros((17,72,4,551))


for ii, meg in enumerate(ll):


### Concrete
	fname_cncrt = data_path + meg + 'degree_proportional25_plv_concrete.mat'
	deg_cncrt = scipy.io.loadmat(fname_cncrt, mat_dtype=True)
	deg_cncrt=deg_cncrt['deg_c']
	
	fname_abs = data_path + meg + 'degree_proportional25_plv_abstract.mat'
	deg_abs = scipy.io.loadmat(fname_abs, mat_dtype=True)
	deg_abs=deg_abs['deg_a']
	
	deg_sub=np.subtract(deg_cncrt,deg_abs)	

	deg_cncrt1=np.subtract(deg_cncrt,np.tile(deg_cncrt[:,:,:10].mean(axis=2),[deg_cncrt.shape[2],1,1]).transpose(1,2,0))
	deg_abs1=np.subtract(deg_abs,np.tile(deg_abs[:,:,:10].mean(axis=2),[deg_abs.shape[2],1,1]).transpose(1,2,0))

	Xc[ii,:,:,:]=deg_cncrt1
	Xa[ii,:,:,:]=deg_abs1
	Xs[ii,:,:,:]=deg_sub
	
p_threshold = 0.05
n_subjects=17
pvalmat=np.ones((72,4))
connectivity = spatial_tris_connectivity(grade_to_tris(5))
t_threshold = -scipy.stats.distributions.t.ppf(p_threshold / 2., n_subjects - 1)
clul=list()
nl=list()
bl=list()

for ii in range(pvalmat.shape[0]):
	print ii
	for jj in range(pvalmat.shape[1]):
		X0=Xa[:,ii,jj,:].squeeze()
		t1, c1, p1, h1= mne.stats.permutation_cluster_1samp_test(X0, n_jobs=2, threshold=t_threshold)
		gci = np.where(p1 < 0.05)[0]
		if gci.any():
			nl+=[ii]
			bl+=[jj]
			for kk in range(len(gci)):
				clul+=c1[gci[kk]]  
		if p1.any():
   		   pvalmat[ii,jj]=p1.min()

"""
print "per1 done"
t1, c1, p1, h1 = mne.stats.permutation_cluster_1samp_test(X1, connectivity=connectivity, n_jobs=2, threshold=t_threshold)
print "per2 done"

"""
