"""
=========================================================================
Compute source space connectivity and visualize it using a circular graph
=========================================================================

This example computes the all-to-all connectivity between 68 regions in
source space based on dSPM inverse solutions and a FreeSurfer cortical
parcellation. The connectivity is visualized using a circular graph which
is ordered based on the locations of the regions.
"""

# Authors: Martin Luessi <mluessi@nmr.mgh.harvard.edu>
#          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
#          Nicolas P. Rougier (graph code borrowed from his matplotlib gallery)
#
# License: BSD (3-clause)

print(__doc__)
import sys

sys.path.append('/imaging/local/software/python_packages/nibabel/1.3.0')
sys.path.append('/imaging/local/software/python_packages/pysurfer/v0.4')
#sys.path.append('/imaging/local/software/python_packages/scikit-learn/v0.14.1')
#sys.path.append('/imaging/local/software/mne_python/latest')

# for qsub
# (add ! here if needed) 
sys.path.append('/imaging/local/software/EPD/latest/x86_64/bin/python')
sys.path.append('/imaging/local/software/mne_python/git-master-0.8/mne-python/')
###

import os
import numpy as np
import mne
from mne import io
from mne.io import Raw
import operator
from mne.minimum_norm import (read_inverse_operator, make_inverse_operator, write_inverse_operator, apply_inverse, apply_inverse_epochs)
from mne.minimum_norm.inverse import (prepare_inverse_operator)
import sklearn
import scipy.io
from mne import find_events
from mne.connectivity import seed_target_indices, spectral_connectivity
import numpy as np
import mne
from mne.datasets import sample
from mne.io import Raw
from mne.minimum_norm import apply_inverse_epochs, read_inverse_operator
from mne.connectivity import spectral_connectivity
from mne.viz import circular_layout, plot_connectivity_circle


data_path = '/imaging/rf02/TypLexMEG/' # root directory for your MEG data
subjects_dir = '/home/rf02/rezvan/TypLexMEG/'    # where your MRI subdirectories are

event_path = event_path = '/group/erp/data/olaf.hauk/MEG/TypLexM/data/MF22_new/'   # where event files are

label_path = '/home/rf02/rezvan/TypLexMEG/createdlabels_SL/'

inv_path = '/imaging/rf02/TypLexMEG/'
inv_fname = 'InverseOperator_EMEG-inv.fif'

# get indices for subjects to be processed from command line input
# 
print sys.argv
subject_inds = [0]
for ss in sys.argv[1:]:
   subject_inds.append( int( ss ) )

#subject_inds=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
print "subject_inds:"
print subject_inds
print "No rejection"

list_all = ['meg10_0378/101209/', 
'meg10_0390/101214/',
'meg11_0026/110223/', 
'meg11_0050/110307/', 
'meg11_0052/110307/', 
'meg11_0069/110315/', 
'meg11_0086/110322/', 
'meg11_0091/110328/', 
'meg11_0096/110404/', 
'meg11_0101/110411/', 
'meg11_0102/110411/', 
'meg11_0112/110505/',
'meg11_0104/110412/',  
'meg11_0118/110509/', 
'meg11_0131/110519/', 
'meg11_0144/110602/', 
'meg11_0147/110603/', 


]

# subjects names used for MRI data
subjects=['SS1_Meg10_0378',
'SS2_Meg10_0390',
'SS3_Meg11_0026',
'SS4_Meg11_0050',
'SS5_Meg11_0052',
'SS6_Meg11_0069',
'SS9_Meg11_0086',
'SS10_Meg11_0091',
'SS12_Meg11_0096',
'SS13_Meg11_0101',
'SS14_Meg11_0102',
'SS15_Meg11_0112',
'SS16_Meg11_0104',
'SS18_Meg11_0118',
'SS19_Meg11_0131',
'SS20_Meg11_0144',
'SS21_Meg11_0147'
]

ll = []
for ss in subject_inds:
 ll.append(list_all[ss])

print "ll:"
print ll
Dmat_cncrt=np.zeros((72,72,4,17))
Dmat_abs=np.zeros((72,72,4,17))
for cnt1, meg in enumerate(ll):
	print cnt1
	
	fname_inv = inv_path + meg + 'InverseOperator_fft_1_48_clean_ica_EMEG-inv.fif'
	fname_raw = data_path + meg + '/semloc_ssstf_fft_1_48_clean_ica_raw.fif'
	fname_event = event_path + meg + 'semloc_raw_ssstnew.txt'

	# Load data
	inverse_operator = read_inverse_operator(fname_inv)
	raw = Raw(fname_raw)
	events = mne.read_events(fname_event)

	# Add a bad channel
	#raw.info['bads'] += ['MEG 2443']

	# Pick MEG channels
	picks = mne.pick_types(raw.info, meg=True, eeg=True, stim=False, eog=True,
		               exclude='bads')

	# Define epochs for left-auditory condition
	tmin, tmax = -0.5, 0.7
	if cnt1==3:
    		reject = dict(eeg=150e-6, grad=200e-12, mag=4e-12) #eog=150e-6,
    	else:
    		reject = dict(eeg=120e-6, grad=200e-12, mag=4e-12) #eog=150e-6, 
	event_ids = {'cncrt_wrd': 1, 'abs_wrd': 2}
	stim_delay = 0.034 # delay in s
	events[:,0] += np.round( raw.info['sfreq']*stim_delay )
	# frequency bands with variable number of cycles for wavelets
	
	
	epochs = mne.Epochs(raw, events, event_ids, tmin, tmax, picks=picks,
		            baseline=(None, 0), reject=reject)
	epochs_concrete = epochs['cncrt_wrd']
	epochs_abstract = epochs['abs_wrd']
	#mne.epochs.equalize_epoch_counts([epochs_concrete,epochs_abstract])
	# Compute inverse solution and for each epoch. By using "return_generator=True"
	# stcs will be a generator object instead of a list.
	snr = 1.0  # use lower SNR for single epochs
	lambda2 = 1.0 / snr ** 2
	method = "MNE"  # use dSPM method (could also be MNE or sLORETA)
	stcs_concrete = apply_inverse_epochs(epochs_concrete, inverse_operator, lambda2, method, pick_ori="normal", return_generator=True)
	stcs_abstract = apply_inverse_epochs(epochs_abstract, inverse_operator, lambda2, method, pick_ori="normal", return_generator=True)
	
	# Get labels for FreeSurfer 'aparc' cortical parcellation with 34 labels/hemi
	labels = mne.read_labels_from_annot(subject=subjects[subject_inds[cnt1]], parc='aparc', subjects_dir=subjects_dir)
	label_colors = [label.color for label in labels]

	# Average the source estimates within each label using sign-flips to reduce
	# signal cancellations, also here we return a generator
	src = inverse_operator['src']
	label_ts_concrete = mne.extract_label_time_course(stcs_concrete, labels, src, mode='mean_flip',return_generator=False)
	label_ts_abstract = mne.extract_label_time_course(stcs_abstract, labels, src, mode='mean_flip',return_generator=False)
	path_c=data_path+ meg+'label_ts_concrete.mat'
	scipy.io.savemat(path_c,{'label_ts_concrete':label_ts_concrete})
	path_a=data_path+ meg+'label_ts_abstract.mat'
	scipy.io.savemat(path_a,{'label_ts_abstract':label_ts_abstract})
	# Now we are ready to compute the connectivity in the alpha band. Notice
	# from the status messages, how mne-python: 1) reads an epoch from the raw
	# file, 2) applies SSP and baseline correction, 3) computes the inverse to
	# obtain a source estimate, 4) averages the source estimate to obtain a
	# time series for each label, 5) includes the label time series in the
	# connectivity computation, and then moves to the next epoch. This
	# behaviour is because we are using generators and allows us to
	# compute connectivity in computationally efficient manner where the amount
	# of memory (RAM) needed is independent from the number of epochs.
		
	fmin = (4., 8., 13., 31.)
	fmax = (8., 12., 30, 45.)
	tmin2 = 0.
	tmax2 = 0.6
	tminb2 = -0.4
	tmaxb2 = 0.
	sfreq = raw.info['sfreq']  # the sampling frequency
	con_methods = ['plv']
	#con_blcn, freqs_blcn, times_blcn, n_epochs_blcn, n_tapers_blcn = spectral_connectivity(label_ts_concrete, method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tminb2, tmax=tmaxb2, mt_adaptive=True, n_jobs=2)

	#con_blab, freqs_bl, times_bl, n_epochs_bl, n_tapers_bl = spectral_connectivity(label_ts_abstract, method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tminb2, tmax=tmaxb2, mt_adaptive=True, n_jobs=2)

	con_cncrt, freqs_cncrt, times_cncrt, n_epochs_cncrt, n_tapers_cncrt = spectral_connectivity(label_ts_concrete, method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tmin2, tmax=tmax2, mt_adaptive=True, n_jobs=2)
	#con_cncrt=np.divide(con_cncrt,con_blcn)

	con_abs, freqs_abs, times_abs, n_epochs_abs, n_tapers_abs = spectral_connectivity(label_ts_abstract,method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tmin2, tmax=tmax2, mt_adaptive=True, n_jobs=2)
	#con_abs=np.divide(con_abs,con_blab)

	# con is a 3D array, get the connectivity for the first (and only) freq. band
	# for each method
	con_res = con_cncrt
	#for method, c in zip(con_methods, con):
	 #   con_res[method] = c[:, :, 0]

	# Now, we visualize the connectivity using a circular graph layout

	# First, we reorder the labels based on their location in the left hemi
	label_names = [label.name for label in labels]

	lh_labels = [name for name in label_names if name.endswith('lh')]

	# Get the y-location of the label
	label_ypos = list()
	for name in lh_labels:
	    idx = label_names.index(name)
	    ypos = np.mean(labels[idx].pos[:, 1])
	    label_ypos.append(ypos)

	# Reorder the labels based on their location
	lh_labels = [label for (ypos, label) in sorted(zip(label_ypos, lh_labels))]

	# For the right hemi
	rh_labels = [label[:-2] + 'rh' for label in lh_labels]

	# Save the plot order and create a circular layout
	node_order = list()
	node_order.extend(lh_labels[::-1])  # reverse the order
	node_order.extend(rh_labels)

	node_angles = circular_layout(label_names, node_order, start_pos=90,
		                      group_boundaries=[0, len(label_names) / 2])
	Dmat_cncrt[:,:,:,cnt1]=con_cncrt
	Dmat_abs[:,:,:,cnt1]=con_abs

Dmatc=Dmat_cncrt.mean(axis=3)
Dmata=Dmat_abs.mean(axis=3)

	# Plot the graph using node colors from the FreeSurfer parcellation. We only
	# show the 300 strongest connections.
#plot_connectivity_circle(con_res[:,:,0], label_names, n_lines=300,node_angles=node_angles, node_colors=label_colors,title='All-to-All Connectivity Concrete Word' 'Condition (COH)')

import matplotlib.pyplot as plt
	#plt.savefig('circle.png', facecolor='black')

	# Plot connectivity for both methods in the same plot
fig = plt.figure(num=None, figsize=(12, 12), facecolor='black')
#no_names = [''] * len(label_names)
for ii in range(Dmatc.shape[2]):
	plot_connectivity_circle(Dmatc[:,:,ii], label_names, n_lines=300,node_angles=node_angles, node_colors=label_colors, title='coh', padding=0, fontsize_colorbar=4, fig=fig, subplot=(2, 2, ii + 1))

fig = plt.figure(num=None, figsize=(12, 12), facecolor='black')
#no_names = [''] * len(label_names)
for ii in range(Dmata.shape[2]):
	plot_connectivity_circle(Dmata[:,:,ii], label_names, n_lines=300,node_angles=node_angles, node_colors=label_colors, title='coh', padding=0, fontsize_colorbar=4, fig=fig, subplot=(2, 2, ii + 1))

plt.show()
	"""
