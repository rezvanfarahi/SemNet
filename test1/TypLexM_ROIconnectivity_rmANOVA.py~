"""
=========================================================================
Compute source space connectivity and visualize it using a circular graph
=========================================================================

This example computes the all-to-all connectivity between 68 regions in
source space based on dSPM inverse solutions and a FreeSurfer cortical
parcellation. The connectivity is visualized using a circular graph which
is ordered based on the locations of the regions.
"""

# Authors: Martin Luessi <mluessi@nmr.mgh.harvard.edu>
#          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>
#          Nicolas P. Rougier (graph code borrowed from his matplotlib gallery)
#
# License: BSD (3-clause)

print(__doc__)
import sys

sys.path.append('/imaging/local/software/python_packages/nibabel/1.3.0')
sys.path.append('/imaging/local/software/python_packages/pysurfer/v0.4')
#sys.path.append('/imaging/local/software/python_packages/scikit-learn/v0.14.1')
#sys.path.append('/imaging/local/software/mne_python/latest')

# for qsub
# (add ! here if needed) 
sys.path.append('/imaging/local/software/EPD/latest/x86_64/bin/python')
sys.path.append('/imaging/local/software/mne_python/git-master-0.8/mne-python/')
###

import os
import numpy as np
import mne
from mne import io
from mne.io import Raw
import operator
from mne.minimum_norm import (read_inverse_operator, make_inverse_operator, write_inverse_operator, apply_inverse, apply_inverse_epochs)
from mne.minimum_norm.inverse import (prepare_inverse_operator)
import sklearn
import scipy
from mne import find_events
from mne.connectivity import seed_target_indices, spectral_connectivity
import numpy as np
import mne
from mne.datasets import sample
from mne.io import Raw
from mne.minimum_norm import apply_inverse_epochs, read_inverse_operator
from mne.connectivity import spectral_connectivity
from mne.viz import circular_layout, plot_connectivity_circle


data_path = '/imaging/rf02/TypLexMEG/' # root directory for your MEG data
subjects_dir = '/home/rf02/rezvan/TypLexMEG/'    # where your MRI subdirectories are

event_path = '/imaging/rf02/TypLexMEG/'    # where event files are

label_path = '/home/rf02/rezvan/TypLexMEG/createdlabels_SL/'

inv_path = '/imaging/rf02/TypLexMEG/'
inv_fname = 'InverseOperator_EMEG-inv.fif'

# get indices for subjects to be processed from command line input
# 
print sys.argv
subject_inds = []
for ss in sys.argv[1:]:
   subject_inds.append( int( ss ) )

subject_inds=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
print "subject_inds:"
print subject_inds
print "No rejection"

list_all = ['meg10_0378/101209/', 
'meg10_0390/101214/',
'meg11_0026/110223/', 
'meg11_0050/110307/', 
'meg11_0052/110307/', 
'meg11_0069/110315/', 
'meg11_0086/110322/', 
'meg11_0091/110328/', 
'meg11_0096/110404/', 
'meg11_0101/110411/', 
'meg11_0102/110411/', 
'meg11_0112/110505/',
'meg11_0104/110412/',  
'meg11_0118/110509/', 
'meg11_0131/110519/', 
'meg11_0144/110602/', 
'meg11_0147/110603/', 


]

# subjects names used for MRI data
subjects=['SS1_Meg10_0378',
'SS2_Meg10_0390',
'SS3_Meg11_0026',
'SS4_Meg11_0050',
'SS5_Meg11_0052',
'SS6_Meg11_0069',
'SS9_Meg11_0086',
'SS10_Meg11_0091',
'SS12_Meg11_0096',
'SS13_Meg11_0101',
'SS14_Meg11_0102',
'SS15_Meg11_0112',
'SS16_Meg11_0104',
'SS18_Meg11_0118',
'SS19_Meg11_0131',
'SS20_Meg11_0144',
'SS21_Meg11_0147'
]

ll = []
for ss in subject_inds:
 ll.append(list_all[ss])

print "ll:"
print ll
Dmat=np.zeros((17,12780))
for cnt1, meg in enumerate(ll):
	print meg
	
	fname_inv = inv_path + meg + 'InverseOperator_fft_1_48_clean_ica_EMEG-inv.fif'
	fname_raw = data_path + meg + '/semloc_ssstf_fft_1_48_clean_ica_raw.fif'
	fname_event = event_path + meg + 'semloc_ssstf_fft_1_48_raw-eve.fif'

	# Load data
	inverse_operator = read_inverse_operator(fname_inv)
	raw = Raw(fname_raw)
	events = mne.read_events(fname_event)

	# Add a bad channel
	#raw.info['bads'] += ['MEG 2443']

	# Pick MEG channels
	picks = mne.pick_types(raw.info, meg=True, eeg=True, stim=False, eog=True,
		               exclude='bads')

	# Define epochs for left-auditory condition
	tmin, tmax = -0.5, 0.7
	reject = dict(eeg=120e-6, grad=200e-12, mag=4e-12)
	event_ids = {'cncrt_wrd': 1, 'abs_wrd': 2}
	# frequency bands with variable number of cycles for wavelets
	stim_delay = 0.034 # delay in s
	events[:,0] += np.round( raw.info['sfreq']*stim_delay )
	
	epochs = mne.Epochs(raw, events, event_ids, tmin, tmax, picks=picks,
		            baseline=(None, 0), reject=reject)
	epochs_concrete = epochs['cncrt_wrd']
	epochs_abstract = epochs['abs_wrd']
	mne.epochs.equalize_epoch_counts([epochs_concrete,epochs_abstract])

	# Compute inverse solution and for each epoch. By using "return_generator=True"
	# stcs will be a generator object instead of a list.
	snr = 1.0  # use lower SNR for single epochs
	lambda2 = 1.0 / snr ** 2
	method = "MNE"  # use dSPM method (could also be MNE or sLORETA)
	stcs_concrete = apply_inverse_epochs(epochs_concrete, inverse_operator, lambda2, method, pick_ori="normal", return_generator=True)
	stcs_abstract = apply_inverse_epochs(epochs_abstract, inverse_operator, lambda2, method, pick_ori="normal", return_generator=True)

	# Get labels for FreeSurfer 'aparc' cortical parcellation with 34 labels/hemi
	labels = mne.read_labels_from_annot(subject=subjects[subject_inds[cnt1]], parc='aparc', subjects_dir=subjects_dir)
	label_colors = [label.color for label in labels]

	# Average the source estimates within each label using sign-flips to reduce
	# signal cancellations, also here we return a generator
	src = inverse_operator['src']
	label_ts_concrete = mne.extract_label_time_course(stcs_concrete, labels, src, mode='mean_flip',return_generator=True)
	label_ts_abstract = mne.extract_label_time_course(stcs_abstract, labels, src, mode='mean_flip',return_generator=True)

	# Now we are ready to compute the connectivity in the alpha band. Notice
	# from the status messages, how mne-python: 1) reads an epoch from the raw
	# file, 2) applies SSP and baseline correction, 3) computes the inverse to
	# obtain a source estimate, 4) averages the source estimate to obtain a
	# time series for each label, 5) includes the label time series in the
	# connectivity computation, and then moves to the next epoch. This
	# behaviour is because we are using generators and allows us to
	# compute connectivity in computationally efficient manner where the amount
	# of memory (RAM) needed is independent from the number of epochs.
	fmin = (4., 8., 13., 31., 4.)
	fmax = (8., 12., 30, 45., 45.)
	tmin2 = 0.15
	tmax2 = 0.55
	sfreq = raw.info['sfreq']  # the sampling frequency
	con_methods = ['plv']
	con_cncrt, freqs_cncrt, times_cncrt, n_epochs_cncrt, n_tapers_cncrt = spectral_connectivity(label_ts_concrete, method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tmin2, tmax=tmax2, mt_adaptive=True, n_jobs=2)
	con_abs, freqs_abs, times_abs, n_epochs_abs, n_tapers_abs = spectral_connectivity(label_ts_abstract,method=con_methods, mode='multitaper', sfreq=sfreq, fmin=fmin, fmax=fmax, faverage=True, tmin=tmin2, tmax=tmax2, mt_adaptive=True, n_jobs=2)

	# con is a 3D array, get the connectivity for the first (and only) freq. band
	# for each method
	"""
	con_res_cncrt = dict()
	for method, c in zip(con_methods, con_cncrt):
	    con_res_cncrt[method] = c[:, :, 0]

	con_res_abs = dict()
	for method, c in zip(con_methods, con_abs):
	    con_res_abs[method] = c[:, :, 0]
	
	cc_cncrt=con_res_cncrt['plv']
	cc_abs=con_res_abs['plv']
	"""
	cc_cncrt=con_cncrt[con_cncrt!=0]
	#cc_cncrt=cc_cncrt.reshape(cc_cncrt.size/4,4)
	cc_abs=con_abs[con_abs!=0]
	#cc_abs=cc_abs.reshape(cc_abs.size/4,4)
	#kk=0
	"""
	for ii in range(cc_cncrt.shape[0]-1):
		for jj in range(cc_cncrt.shape[1]-1):
			if ii<jj:
				#kk=kk+1
				cc_cncrt[ii,jj,:]=cc_cncrt[jj,ii,:]

	cncrt_lh=cc_cncrt[::2,::2,:]
	cncrt_lhmean=cncrt_lh.sum(axis=0).sum(axis=0)/((cncrt_lh.shape[0]-1)*(cncrt_lh.shape[1]-1))
	cncrt_rh=cc_cncrt[1::2,1::2]
	cncrt_rhmean=cncrt_rh.sum(axis=0).sum(axis=0)/((cncrt_rh.shape[0]-1)*(cncrt_rh.shape[1]-1))
	
	cc2=[]
	#kk=0
	for ii in range(cc_abs.shape[0]-1):
		for jj in range(cc_abs.shape[1]-1):
			if ii<jj:
				#kk=kk+1
				cc_abs[ii,jj]=cc_abs[jj,ii]

	abs_lh=cc_abs[::2,::2]
	abs_lhmean=abs_lh.sum(axis=0).sum(axis=0)/((abs_lh.shape[0]-1)*(abs_lh.shape[1]-1))
	abs_rh=cc_abs[1::2,1::2]
	abs_rhmean=abs_rh.sum(axis=0).sum(axis=0)/((abs_rh.shape[0]-1)*(abs_rh.shape[1]-1))
	"""
	Dmat[cnt1,:]=np.subtract(cc_cncrt,cc_abs)


#factor_levels = [2, 1]  # number of levels in each factor
#effects = 'A' 
#tvals, cvals, pvals, h0val = mne.stats.permutation_cluster_1samp_test(Dmat, threshold=None, n_permutations=1024, tail=0, connectivity=None, verbose=None, n_jobs=1, buffer_size=1000)
tvals = mne.stats.ttest_1samp_no_p(Dmat, sigma=0, method='relative')
threshold = -scipy.stats.distributions.t.ppf(p_thresh, n_samples - 1)
#reject, pval_corrected=mne.stats.fdr_correction(pvals, alpha=0.05, method='indep')
#aa0=pval_corrected[0,reject[0,:]]
		
	
